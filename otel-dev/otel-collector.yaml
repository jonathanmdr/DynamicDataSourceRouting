receivers:
  otlp:
    protocols:
      grpc:
      http:
  prometheus:
    config:
      scrape_configs:
        - job_name: otelcol-metrics
          scrape_interval: 60s
          static_configs:
            - targets: [ "host.docker.internal:8888" ] # prometheus:8888
        - job_name: spanmetrics
          scrape_interval: 60s
          static_configs:
            - targets: [ "host.docker.internal:9999" ] # prometheus:9999
          metric_relabel_configs:
            - source_labels: [ span_kind ]
              regex: SPAN_KIND_SERVER
              action: keep
            - source_labels: [ http_user_agent, request_header_user_agent, http_request_header_user_agent ]
              regex: kube-probe/.*|Prometheus/.*|Gravitee.io/.*|ELB-HealthChecker/.*
              action: drop
            - regex: http_user_agent|request_header_user_agent|http_request_header_user_agent
              action: labeldrop
  # Dummy receiver that's never used, because a pipeline is required to have one.
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: 0.0.0.0:12345

exporters:
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
  logging:
    logLevel: debug
  otlp/jaeger:
    endpoint: "jaeger:4317"
    tls:
      insecure: true
  prometheus/spanmetrics:
    endpoint: 0.0.0.0:9999
    metric_expiration: 75s

processors:
  batch:
  tail_sampling:
    decision_wait: 45s
    num_traces: 50000
    policies: [
      {
        name: ignore-http-user-agent,
        type: string_attribute,
        string_attribute: { key: http.user_agent, values: [ kube-probe/*, Prometheus/*, Gravitee.io/*, ELB-HealthChecker/* ], enabled_regex_matching: true, invert_match: true }
      },
      {
        name: ignore-request-header-user-agent,
        type: string_attribute,
        string_attribute: { key: request.header.user-agent, values: [ kube-probe/*, Prometheus/*, Gravitee.io/*, ELB-HealthChecker/* ], enabled_regex_matching: true, invert_match: true }
      },
      {
        name: ignore-http-request-header-user-agent,
        type: string_attribute,
        string_attribute: { key: http.request.header.user-agent, values: [ kube-probe/*, Prometheus/*, Gravitee.io/*, ELB-HealthChecker/* ], enabled_regex_matching: true, invert_match: true }
      },
      {
        name: sampling-50%,
        type: probabilistic,
        probabilistic: { sampling_percentage: 50 }
      },
    ]
  spanmetrics:
    dimensions:
      - name: http.method
      - name: http.status_code
      - name: http.user_agent
      - name: request.header.user-agent
      - name: http.request.header.user-agent
    latency_histogram_buckets: [ 2ms, 10ms, 100ms, 1s, 10s ]
    metrics_exporter: prometheus/spanmetrics

service:
  telemetry:
    metrics:
      address: 0.0.0.0:8888
  pipelines:
    # The exporter name must match the metrics_exporter name.
    # The receiver is just a dummy and never used; added to pass validation requiring at least one receiver in a pipeline.
    metrics/spanmetrics:
      receivers: [ otlp/spanmetrics ]
      exporters: [ prometheus/spanmetrics ]
    traces:
      receivers: [ otlp ]
      processors: [ spanmetrics, tail_sampling, batch ]
      exporters: [ logging, otlp/jaeger ]
    metrics:
      receivers: [ otlp, prometheus ]
      processors: [ batch ]
      exporters: [ logging, prometheusremotewrite ]